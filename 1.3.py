# ‚úÖ CODE FULL GOLIKE - AUTO JOB FOLLOW TIKTOK
# By x√© t√∫i m√π | T√≠ch h·ª£p rich + ADB + l·ªçc gi√° + ri√™ng t∆∞

import json, os, time, sys, requests, cloudscraper, webbrowser
from bs4 import BeautifulSoup
from colorama import Fore, init
from rich.console import Console
from rich.table import Table
from rich import box
from rich.panel import Panel
from rich.prompt import Prompt


# Banner c·∫£i ti·∫øn
import sys
import time
import random
from pystyle import Colors, Colorate

# Danh s√°ch m√†u gradient d√πng cho t·ª´ng l·∫ßn
gradient_list = [
    Colors.red_to_yellow,
    Colors.green_to_cyan,
    Colors.purple_to_red,
    Colors.yellow_to_red,
    Colors.blue_to_purple,
    Colors.rainbow
]

import sys
import time
import random
from pystyle import Colors, Colorate

frames = [
    "[‚Ä¢      ]",
    "[ ‚Ä¢     ]",
    "[  ‚Ä¢    ]",
    "[   ‚Ä¢   ]",
    "[    ‚Ä¢  ]",
    "[     ‚Ä¢ ]",
    "[      ‚Ä¢]",
    "[     ‚Ä¢ ]",
    "[    ‚Ä¢  ]",
    "[   ‚Ä¢   ]",
    "[  ‚Ä¢    ]",
    "[ ‚Ä¢     ]",
]

color_gradients = [
    Colors.red_to_yellow,
    Colors.green_to_cyan,
    Colors.purple_to_red,
    Colors.yellow_to_red,
    Colors.blue_to_purple,
    Colors.rainbow,
]

def loading_animation_mau(text="‚è≥ ƒêANG T·∫¢I", delay=0.08, repeat=-1):
    try:
        count = 0
        while repeat == -1 or count < repeat:
            for frame in frames:
                gradient = random.choice(color_gradients)
                colored = Colorate.Horizontal(gradient, f"{text} {frame}", 1)
                sys.stdout.write("\r" + colored)
                sys.stdout.flush()
                time.sleep(delay)
            count += 1
    except KeyboardInterrupt:
        sys.stdout.write("\n")
        sys.stdout.flush()

def menu_gradient_animated(prompt_text, options, default="1"):
    from threading import Event, Thread

    stop_event = Event()
    
    def animate_options():
        while not stop_event.is_set():
            os.system("cls" if os.name == "nt" else "clear")
            gradient = random.choice(gradient_list)
            print()  # line spacing
            for i, opt in enumerate(options, 1):
                print(Colorate.Horizontal(gradient, f"[{i}] {opt}"))
            print()
            gradient_prompt = Colorate.Horizontal(gradient, prompt_text)
            print(gradient_prompt)
            time.sleep(0.99)
    
    # Ch·∫°y animation trong n·ªÅn
    t = Thread(target=animate_options)
    t.start()

    # Nh·∫≠p input
    try:
        choice = Prompt.ask("Ch·ªçn", choices=[str(i) for i in range(1, len(options) + 1)], default=default)
    finally:
        stop_event.set()
        t.join()
    
    return choice


console = Console()
import os, time, platform, random, datetime
from pystyle import Colors, Colorate, Center
from rich.console import Console
from rich.spinner import Spinner
from threading import Thread

# Ch·ªçn m√†u random m·ªói l·∫ßn m·ªü
gradient_options = [
    Colors.red_to_yellow,
    Colors.green_to_cyan,
    Colors.purple_to_red,
    Colors.yellow_to_red,
    Colors.blue_to_purple,
    Colors.rainbow,
]

# 

# Hi·ªÉn th·ªã banner ch√≠nh
import os, time, platform, random, datetime
from pystyle import Colors, Colorate, Center
from rich.console import Console
from rich.spinner import Spinner
from threading import Thread

def banner():
    os.system("cls" if os.name == "nt" else "clear")
    
    # Banner ASCII
    ascii = """

"""

    # Random m√†u
    gradient = random.choice(gradient_options)
    colored_ascii = Colorate.Vertical(gradient, ascii)
    for line in colored_ascii.splitlines():
        print(Center.XCenter(line))
        time.sleep(0.01)

    # Quote s·ª± ki·ªán
    print(Center.XCenter(Colorate.Horizontal(gradient, "üîó Box Zalo: ")))
    print(Center.XCenter(Colorate.Horizontal(gradient, "üîó Admin: c∆∞·ªùng\n")))
    print("\n")


init()
console = Console()
os.system("clear")

try:
    with open("Authorization.txt", "x"): pass
    with open("token.txt", "x"): pass
except: pass

try:
    with open("Authorization.txt", "r") as Authorization, open("token.txt", "r") as t:
        author = Authorization.read().strip()
        token = t.read().strip()
except:
    print("\033[1;31mKh√¥ng ƒë·ªçc ƒë∆∞·ª£c Authorization ho·∫∑c token!")
    sys.exit(1)
banner()
console.print(Panel.fit(
    "[bold magenta]CH·ªåN T√ôY CH·ªåN:\n\n"
    "[bold cyan][1][/bold cyan] [green]S·ª≠ d·ª•ng Authorization v√† Token hi·ªán t·∫°i[/green]\n"
    "[bold cyan][2][/bold cyan] [yellow]Nh·∫≠p Authorization v√† Token m·ªõi[/yellow]",
    title="[bold white]LOGIN GOLIKE[/bold white]", border_style="bright_blue"))

chon = Prompt.ask("[bold white]Nh·∫≠p l·ª±a ch·ªçn[/bold white]", choices=["1", "2"], default="1")
if chon == "2":
    author = input("NH·∫¨P AUTHORIZATION: ").strip()
    token = input("NH·∫¨P TOKEN: ").strip()
    with open("Authorization.txt", "w") as f1, open("token.txt", "w") as f2:
        f1.write(author)
        f2.write(token)

headers = {
    'Accept': 'application/json, text/plain, */*',
    'Content-Type': 'application/json;charset=utf-8',
    'Authorization': author,
    't': token,
    'User-Agent': 'Mozilla/5.0',
    'Referer': 'https://app.golike.net/account/manager/tiktok',
}
scraper = cloudscraper.create_scraper()

def chonacc():
    res = scraper.get('https://gateway.golike.net/api/tiktok-account', headers=headers)
    return res.json()

chontk = chonacc()

if chontk.get("status") != 200:
    console.print("[bold red]‚õî Token ho·∫∑c Authorization sai!")
    sys.exit()
banner()
# üéØ Ch·ªçn ch·∫ø ƒë·ªô l·ªçc
# Menu l·ªçc job
loc_gia = "2"
# Menu job ri√™ng t∆∞
bo_rieng_tu = "1"
# Menu ch·ªçn d√πng ADB
print("1.K·∫øt n·ªëi adb \n2.Kh√¥ng kn adb ")

su_dung_adb = Prompt.ask("Ch·ªçn", choices=["1", "2"], default="1") == "1"
def ket_noi_adb_va_nhap_toa_do():
    try:
        ip = input("üîå Nh·∫≠p IP v√† port (VD: 192.168.1.5:5555): ").strip()
        pair_code = input("üîë Nh·∫≠p m√£ pair code: ").strip()
        pair_port = ip.split(":")[1]
        ip_only = ip.split(":")[0]

        # Pair
        print(Fore.CYAN + f"üîÑ ƒêang gh√©p n·ªëi v·ªõi {ip_only}:{pair_port} ...")
        os.system(f"adb pair {ip_only}:{pair_port} {pair_code}")
        time.sleep(2)

        # Connect
        print(Fore.CYAN + f"üîó ƒêang k·∫øt n·ªëi t·ªõi {ip} ...")
        os.system(f"adb connect {ip}")
        time.sleep(2)

        # Ki·ªÉm tra k·∫øt n·ªëi
        adb_out = os.popen("adb devices").read()
        if f"{ip_only}\tdevice" in adb_out:
            loading_animation_mau(f"{Fore.GREEN}‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi thi·∫øt b·ªã {ip}{Fore.WHITE}")
        elif f"{ip_only}\tunauthorized" in adb_out:
            print(Fore.RED + "‚ùå Thi·∫øt b·ªã ch∆∞a c·∫•p quy·ªÅn ADB! Ki·ªÉm tra ƒëi·ªán tho·∫°i." + Fore.WHITE)
            return
        else:
            print(Fore.RED + "‚ùå K·∫øt n·ªëi ADB th·∫•t b·∫°i. Ki·ªÉm tra IP ho·∫∑c c·ªïng." + Fore.WHITE)
            return

        # Nh·∫≠p t·ªça ƒë·ªô
        try:
            x = int(input("üìç Nh·∫≠p t·ªça ƒë·ªô X Follow: "))
            y = int(input("üìç Nh·∫≠p t·ªça ƒë·ªô Y c·∫ßn b·∫•m: "))
            loading_animation_mau(f"{Fore.YELLOW}‚úÖ Nh·∫≠p t·ªça ƒë·ªô ({x}, {y}) th√†nh c√¥ng!{Fore.WHITE}")
        except ValueError:
            print(Fore.RED + "‚ùå T·ªça ƒë·ªô ph·∫£i l√† s·ªë nguy√™n!" + Fore.WHITE)

    except Exception as e:
        print(Fore.RED + f"‚ö†Ô∏è L·ªói: {e}" + Fore.WHITE)

if su_dung_adb:
    ket_noi_adb_va_nhap_toa_do()

import os
import time
from colorama import Fore, Style, init
init(autoreset=True)

def loading_animation_mau(text, seconds=3):
    for _ in range(seconds):
        print(text + ".", end="\r")
        time.sleep(0.4)
        print(text + "..", end="\r")
        time.sleep(0.4)
        print(text + "...", end="\r")
        time.sleep(0.4)


banner()
def dsacc():
    table = Table(title="DANH S√ÅCH ACC", box=box.ROUNDED)
    table.add_column("STT", style="yellow", justify="center")
    table.add_column("Nick", style="cyan")
    for i, acc in enumerate(chontk["data"], 1):
        table.add_row(str(i), acc["nickname"])
    console.print(table)

dsacc()
while True:
    try:
        chon = int(input("Ch·ªçn acc TIKTOK: "))
        if 1 <= chon <= len(chontk["data"]):
            acc = chontk["data"][chon - 1]
            break
        print("Nh·∫≠p sai!")
    except:
        print("L·ªói nh·∫≠p")

acc_id = acc["id"]
nickname = acc["nickname"]
delay = int(input("Delay gi√¢y: "))
doiacc = int(input("S·ªë l·∫ßn fail th√¨ ƒë·ªïi acc: "))

def open_link(link):
    try:
        if os.path.exists("/data/data/com.termux/files/usr/bin/termux-open-url"):
            loading_animation_mau("[üåê] ƒêang m·ªü link...")
            os.system(f'termux-open-url "{link}"')

        elif su_dung_adb and "device" in os.popen("adb devices").read():
            loading_animation_mau("[ü§ñ] ƒêang m·ªü link qua ADB...")
            os.system(f'adb shell am start -a android.intent.action.VIEW -d "{link}"')
            time.sleep(2)

            # ‚úÖ D√πng t·ªça ƒë·ªô ƒë√£ l∆∞u t·ª´ tr∆∞·ªõc
            os.system(f'adb shell input tap {x} {y}')
            loading_animation_mau(f"‚úÖ ƒê√£ follow t·∫°i ({x}, {y}) qua ADB")

        else:
            import webbrowser
            loading_animation_mau("[üíª] ƒêang m·ªü link b·∫±ng tr√¨nh duy·ªát m√°y t√≠nh...")
            webbrowser.open(link)

        time.sleep(2)

    except Exception as e:
        print(f"‚ùó Kh√¥ng m·ªü ƒë∆∞·ª£c link: {link}\nL·ªói: {e}")

from rich.progress import Progress, SpinnerColumn, BarColumn, TimeElapsedColumn, TextColumn
import time

def hieu_ung_progress(task_name="ƒêang x·ª≠ l√Ω", seconds=5):
    with Progress(
        SpinnerColumn(style="cyan"),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(bar_width=None),
        TimeElapsedColumn(),
        transient=True,  # X√≥a thanh sau khi ch·∫°y xong
    ) as progress:
        task = progress.add_task(f"[bold yellow]{task_name}...", total=seconds)
        for _ in range(seconds):
            time.sleep(1)
            progress.update(task, advance=1)

from rich.console import Console
from rich.table import Table
from rich import box
import os

console = Console()

def display(nick, price, dem, tong, link, status):
    os.system('cls' if os.name == 'nt' else 'clear')
    banner()
    # Ti√™u ƒë·ªÅ to r√µ ·ªü ƒë·∫ßu
    console.rule("[bold bright_cyan]‚ú® GOLIKE TOOL ‚ú®", style="cyan")

    tb = Table(title="Th√¥ng tin chi ti·∫øt", box=box.ROUNDED, border_style="bright_blue", title_style="bold magenta")
    tb.add_column("üîπ Th√¥ng Tin", style="bold green", justify="right", no_wrap=True)
    tb.add_column("üî∏ Gi√° Tr·ªã", style="bold yellow", overflow="fold")

    tb.add_row("Nick TikTok", f"[bold white]{nick}[/bold white]")
    tb.add_row("üí∞ Gi√°", f"[bold cyan]{price}[/bold cyan]")
    tb.add_row("‚úÖ Job Done", f"[bold green]{dem}[/bold green]")
    tb.add_row("üìä T·ªïng Job", f"[bold yellow]{tong}[/bold yellow]")
    tb.add_row("üîó Link", f"[blue underline]{link}[/blue underline]")
    
    # Tr·∫°ng th√°i m√†u ƒë·ªông
    status_color = "green" if "th√†nh c√¥ng" in status.lower() else "red" if "l·ªói" in status.lower() else "yellow"
    tb.add_row("üìå Tr·∫°ng Th√°i", f"[bold {status_color}]{status}[/bold {status_color}]")

    console.print(tb)


def get_job(aid):
    try:
        res = scraper.get('https://gateway.golike.net/api/advertising/publishers/tiktok/jobs',
                          headers=headers, params={'account_id': aid})
        return res.json()
    except: return {}

def hoanthanh(ads_id, acc_id):
    try:
        res = scraper.post('https://gateway.golike.net/api/advertising/publishers/tiktok/complete-jobs',
                           headers=headers,
                           json={'ads_id': ads_id, 'account_id': acc_id, 'async': True, 'data': None})
        return res.json()
    except: return {}

def baoloi(ads_id, obj_id, acc_id, loai):
    try:
        scraper.post('https://gateway.golike.net/api/report/send', headers=headers,
                     json={'description': 'T√¥i ƒë√£ l√†m Job n√†y r·ªìi',
                           'users_advertising_id': ads_id,
                           'type': 'ads',
                           'provider': 'tiktok',
                           'fb_id': acc_id,
                           'error_type': 6})
        scraper.post('https://gateway.golike.net/api/advertising/publishers/tiktok/skip-jobs',
                     headers=headers,
                     json={'ads_id': ads_id, 'object_id': obj_id, 'account_id': acc_id, 'type': loai})
    except: pass

dem, tong, fail = 0, 0, 0

while True:
    if fail >= doiacc:
        print(f"‚ö†Ô∏è Acc l·ªói qu√° nhi·ªÅu, ƒë·ªïi acc kh√°c.")
        dsacc()
        while True:
            try:
                chon = int(input("Ch·ªçn l·∫°i acc: "))
                if 1 <= chon <= len(chontk["data"]):
                    acc = chontk["data"][chon - 1]
                    acc_id = acc["id"]
                    nickname = acc["nickname"]
                    fail = 0
                    break
                print("Sai l·ª±a ch·ªçn!")
            except: print("L·ªói nh·∫≠p")

    job = get_job(acc_id)
    if not isinstance(job, dict) or "data" not in job or not isinstance(job["data"], dict) or "link" not in job["data"]:
        display(nickname, "Kh√¥ng c√≥", dem, tong, "-", "Kh√¥ng l·∫•y ƒë∆∞·ª£c job")
        time.sleep(2)
        fail += 1
        continue


    data = job["data"]
    if bo_rieng_tu and data.get("is_private", False):
        display(nickname, "Ri√™ng t∆∞", dem, tong, "-", "B·ªè job ri√™ng t∆∞")
        baoloi(data["id"], data["object_id"], acc_id, data["type"])
        time.sleep(1)
        continue
    if data["type"] != "follow":
        display(nickname, str(data.get("price_per_after_cost")), dem, tong, "-", "Kh√¥ng ph·∫£i follow")
        baoloi(data["id"], data["object_id"], acc_id, data["type"])
        time.sleep(1)
        continue

    link = data["link"]
    display(nickname, str(data.get("price_per_after_cost")), dem, tong, link, "ƒêang l√†m")
    open_link(link)
    for i in range(delay, -1, -1):
        display(nickname, str(data.get("price_per_after_cost")), dem, tong, link, f"ƒê·ª£i {i}s")
        time.sleep(1)

    nhantien = hoanthanh(data["id"], acc_id)
    if nhantien.get("status") == 200:
        tien = nhantien["data"].get("price_per_after_cost", 42)
        dem += 1
        tong += tien
        hieu_ung_progress("üì¶ ƒê·ª£i ho√†n t·∫•t nh·∫≠n ti·ªÅn....", seconds=5)
        display(nickname, str(tien), dem, tong, link, "‚úÖ Th√†nh c√¥ng")
        fail = 0
    elif nhantien.get("status") == "already_completed":
        display(nickname, "ƒê√£ l√†m", dem, tong, link, "ƒê√£ ho√†n th√†nh tr∆∞·ªõc")
        baoloi(data["id"], data["object_id"], acc_id, data["type"])
    else:
        fail += 1
        display(nickname, "L·ªói nh·∫≠n", dem, tong, link, "‚ùå Nh·∫≠n ti·ªÅn l·ªói")
        baoloi(data["id"], data["object_id"], acc_id, data["type"])

    time.sleep(1)

